# ========================
# ==== argN Constants ====
# ========================

# (bug in yml library keeps from factoring)

argN: &argN
  name: arg[0:9]+
  type: unknown
  docs: The argument to the call at the specific index, [0:9]+. (For example, the number of arguments to a call changes based on the targeted function.)
  derived_from: none

arg0: &arg0_u32
  name: arg0
  type: u32
  docs: The argument to the opcode at index 0.
  derived_from: none

# ========================
# ==== immN Constants ====
# ========================



# ============================
# ==== Category Constants ====
# ============================

# CATEGORY ID
# (bug in yml library keeps from factoring)

category_id_arith: &category_id_arith
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: arith
category_id_atomic: &category_id_atomic
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: atomic
category_id_compare: &category_id_compare
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: compare
category_id_const: &category_id_const
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: const
category_id_control: &category_id_control
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: control
category_id_convert: &category_id_convert
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: convert
category_id_exn: &category_id_exn
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: exn
category_id_gc: &category_id_gc
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: gc
category_id_global: &category_id_global
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: global
category_id_load: &category_id_load
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: load
category_id_local: &category_id_local
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: local
category_id_memory: &category_id_memory
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: memory
category_id_misc: &category_id_misc
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: misc
category_id_ref: &category_id_ref
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: ref
category_id_simd: &category_id_simd
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: simd
category_id_store: &category_id_store
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: store
category_id_table: &category_id_table
  name: category_id
  docs: The ID of the category of this opcode.
  type: u32
  derived_from: table

# CATEGORY NAME

category_name_arith: &category_name_arith
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: arith
category_name_atomic: &category_name_atomic
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: atomic
category_name_compare: &category_name_compare
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: compare
category_name_const: &category_name_const
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: const
category_name_control: &category_name_control
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: control
category_name_convert: &category_name_convert
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: convert
category_name_exn: &category_name_exn
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: exn
category_name_gc: &category_name_gc
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: gc
category_name_global: &category_name_global
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: global
category_name_load: &category_name_load
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: load
category_name_local: &category_name_local
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: local
category_name_memory: &category_name_memory
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: memory
category_name_misc: &category_name_misc
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: misc
category_name_ref: &category_name_ref
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: ref
category_name_simd: &category_name_simd
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: simd
category_name_store: &category_name_store
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: store
category_name_table: &category_name_table
  name: category_name
  docs: The category name of this opcode.
  type: str
  derived_from: table

# ========================
# ==== MODE Constants ====
# ========================

default_modes: &default_modes
  - before
  - after
  - alt
block_modes: &block_modes
  - before
  # TODO: alias semantic_after to after
  - semantic_after
  - block_alt
  - entry
  - exit

# =======================
# ==== wasm:opcode:* ====
# =======================

unreachable: &unreachable
  name: unreachable
  bound_vars:
    - *category_id_misc
    - *category_name_misc
  bound_fns: []
  supported_modes: [ alt, before ]
  req_map: false
  docs: "https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/Control_flow/unreachable"

nop: &nop
  name: nop
  bound_vars:
    - *category_id_misc
    - *category_name_misc
  bound_fns: []
  supported_modes: *default_modes
  req_map: false
  docs: "https://www.w3.org/TR/wasm-core-2/#syntax-instr-control"

block: &block
  name: block
  bound_vars:
    - *category_id_control
    - *category_name_control
    - *argN
  bound_fns: []
  supported_modes: *block_modes
  req_map: false
  docs: "https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/Control_flow/block"

loop: &loop
  name: loop
  bound_vars:
    - *category_id_control
    - *category_name_control
    - *argN
  bound_fns: []
  supported_modes: *block_modes
  req_map: false
  docs: "https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/Control_flow/loop"


# TODO:
#pub struct ProvidedGlobal {
#    pub name: String,
#    pub docs: String,
#    pub global: Global,
#    pub value: Option<Value>,
#    pub derived_from: Option<Expr>,
#}
#pub struct ProvidedFunction {
#  pub name: String,
#  pub docs: String,
#  pub function: Fn,
#  pub req_args: ReqArgs,
#}

if: &if
  name: if
  bound_vars:
    - *category_id_control
    - *category_name_control
    - *arg0_u32
  bound_fns: []
  supported_modes: *block_modes
  req_map: false
  docs: "https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/Control_flow/if...else"

else: &else
  name: else
  bound_vars:
    - *category_id_control
    - *category_name_control
  bound_fns: []
  supported_modes: *block_modes
  req_map: false
  docs: "https://developer.mozilla.org/en-US/docs/WebAssembly/Reference/Control_flow/if...else"

