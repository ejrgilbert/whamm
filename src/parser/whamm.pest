// ==============================
// ---- High-Level Structure ----
// ==============================

// supports top-level global declarations/initial assignments and probe definitions
script = { SOI ~ (if_stmt | statement | fn_def)* ~ probe_def ~ ( if_stmt | statement | fn_def | probe_def )* ~ EOI }
 
// TODO -- support comma separated list of specs: https://docs.oracle.com/cd/E23824_01/html/E22973/glghi.html#scrolltoc
probe_def = { PROBE_SPEC ~ PUSH(predicate?) ~ block }

predicate = { "/" ~ expr ~ "/" }

//making the decision not to support "void" functions -- can change later
fn_def = { ID ~ "(" ~ (( param ) ~ ("," ~ param )*) ? ~ ")" ~ ("->" ~ TYPE) ? ~ block }
param = { TYPE ~ ID }
// =====================
// ---- Identifiers ----
// =====================

PROBE_ID = @{
    (ASCII_ALPHA
    | "_"
    | ASCII_DIGIT
    | "*"
    | "+"
    | "\\"
    | "?"
    | "|"
    | "!"
    | "["
    | "]")+
}
//disallowed IDs should have the full list of reserved names like return
get_map = { ID ~ "[" ~ expr ~ "]"}

DISALLOWED_ID = _{ "return" | "if" | "while" | "else" | "map" }
ID = @{ (!DISALLOWED_ID ~ (ASCII_ALPHA | "_")+ ~ ( ASCII_DIGIT | (ASCII_ALPHA | "_")+ )*) |
        (DISALLOWED_ID ~ (ASCII_ALPHA | "_" | ASCII_DIGIT)+)
}
// TODO -- I think we only want the one that has all three colons, or a single PROBE_ID
PROBE_SPEC = ${
    PROBE_ID? ~ ":" ~ PROBE_ID? ~ ":" ~ PROBE_ID? ~ ":" ~ PROBE_ID?
    | PROBE_ID? ~ ":" ~ PROBE_ID? ~ ":" ~ PROBE_ID?
    | PROBE_ID? ~ ":" ~ PROBE_ID?
    | PROBE_ID
}

// ===============
// ---- Types ----
// ===============

TY_U32 = @{ "u32" }
TY_I32 = @{ "i32" }
TY_F32 = @{ "f32" }
TY_U64 = @{ "u64" }
TY_I64 = @{ "i64" }
TY_F64 = @{ "f64" }
TY_BOOL = @{ "bool" }
TY_STRING = @{ "str" }

// a tuple that's used as a type declaration
TY_TUPLE = { "(" ~ ")"| "(" ~ TYPE ~ ( "," ~ TYPE )* ~ ")" }
// first TYPE is the type of the key, second TYPE is the type of the value
TY_MAP = { "map<" ~ TYPE ~ "," ~ TYPE ~ ">" }

TYPE = _{ TY_U32 | TY_I32 | TY_F32 | TY_U64 | TY_I64 | TY_F64 | TY_BOOL | TY_STRING | TY_TUPLE | TY_MAP }

// ====================
// ---- Statements ----
// ====================

//has to be "_stmt" because of rust rules
if_stmt = { "if" ~ "(" ~ expr ~ ")" ~ block ~ (else_stmt | elif) ? }
elif = { "elif" ~ "(" ~ expr ~ ")" ~ block ~ (else_stmt | elif) ? }
else_stmt = { "else" ~  block }
arg = { tuple | expr | val | ternary }
fn_call = { ID ~ "(" ~ ( arg )? ~ ( "," ~ arg )* ~ ")" }
block = { "{" ~ (if_stmt | statement)* ~ "}" }


// var ops
ret = { "return" ~ expr ? }

report_declaration = { "report" ~ declaration }
assignment = { (get_map | ID) ~ "=" ~ (ternary | expr) }
declaration = { TYPE ~ !RESERVED_KEYWORDS ~ ID }

initialize = { TYPE ~ ID ~ "=" ~ (ternary | expr) }
statement = { ( ( initialize | fn_call | report_declaration | declaration | assignment | incrementor | decrementor | ret ) ~ ";" )+ }
incrementor = { (get_map | ID) ~ "++"}
decrementor = { (get_map | ID) ~ "--"}
// =====================
// ---- Expressions ----
// =====================

ternary = { expr ~ "?" ~ expr ~ ":" ~ expr }

expr = { prefix? ~ operand ~ (BINOP ~ prefix? ~ operand)* }

prefix = _{ UNOP }
UNOP = _{ neg }
    neg = { "!" }

val = _{ BOOL | get_map | ID | INT | DEC | STRING | tuple }
operand = _{ fn_call | "(" ~ expr ~ ")" | val }

tuple = { "(" ~ ")" | "(" ~ (val) ~ ( "," ~ val )* ~ ")" }


BINOP = _{ LOGOP | RELOP | SUMOP | MULOP }
    // Logical operators
    and = { "&&" }
    or = { "||" }
    LOGOP = _{ and | or }

    // Relational operators
    eq = { "==" }
    ne = { "!=" }
    ge = { ">=" }
    gt = { ">" }
    le = { "<=" }
    lt = { "<" }
    RELOP = _{ eq | ne | ge | gt | le | lt }

    // Highest precedence arithmetic operators
    add = { "+" }
    subtract = { "-" }
    SUMOP = _{ add | subtract }

    // Next highest precedence arithmetic operators
    multiply = { "*" }
    divide = { "/" }
    modulo = { "%" }
    MULOP = _{ multiply | divide | modulo }

// ===================
// ---- Terminals ----
// ===================

// TODO -- make sure that the binary/octal/hexadecimal formats are parsed correctly
INT = @{
    "0x" ~ ASCII_HEX_DIGIT+ // Hexadecimal digit
    | "0b" ~ ASCII_BIN_DIGIT+ // Binary digit
    | "0" ~ ASCII_OCT_DIGIT+ // Octal digit
    | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ // Multiple digit, base 10
    | ASCII_DIGIT // Single digit, base 10 (account for having just '0')
    | "-" ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* //negative anything but 0
}

DEC = @{
    ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT*
}

BOOL = @{
    "true"
    | "false"
}

STRING = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

// ===========================
// ---- Reserved Keywords ----
// ===========================

instr_arg = { "arg" ~ ASCII_DIGIT+ }

RESERVED_KEYWORDS = @{
    instr_arg
}

// ===================
// ---- Skip-able ----
// ===================

newline = _{ "\n" | "\r\n" }
WHITESPACE = _{ " " | "\t" | newline }

block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }
COMMENT    = _{ block_comment | ("//" ~ (!newline ~ ANY)*) }
