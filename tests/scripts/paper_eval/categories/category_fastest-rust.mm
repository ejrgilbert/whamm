report var const: u32;
report var misc: u32;
report var control: u32;
report var local: u32;
report var global: u32;
report var table: u32;
report var load: u32;
report var store: u32;
report var mem: u32;
report var arith: u32;
report var compare: u32;
report var convert: u32;
report var exn: u32;
report var gc: u32;
report var atomic: u32;

wasm:opcode:unreachable|nop|drop:before { misc++; }
wasm:opcode:block|loop|if|else|end:before { control++; }
wasm:opcode:br|br_if|br_table|return|*select:before { control++; }
wasm:opcode:call:before { control++; }
wasm:opcode:call_indirect:before { control++; }
wasm:opcode:return_call:before { control++; }
wasm:opcode:return_call_indirect:before { control++; }
wasm:opcode:throw*:before { exn++; }
wasm:opcode:local*:before { local++; }
wasm:opcode:global*:before { global++; }
wasm:opcode:i32.load:before { load++; }
wasm:opcode:i64.load:before { load++; }
wasm:opcode:f32.load:before { load++; }
wasm:opcode:f64.load:before { load++; }
wasm:opcode:i32.load8_u:before { load++; }
wasm:opcode:i32.load16_s:before { load++; }
wasm:opcode:i32.load16_u:before { load++; }
wasm:opcode:i64.load8_s:before { load++; }
wasm:opcode:i64.load8_u:before { load++; }
wasm:opcode:i64.load16_s:before { load++; }
wasm:opcode:i64.load16_u:before { load++; }
wasm:opcode:i64.load32_s:before { load++; }
wasm:opcode:i64.load32_u:before { load++; }
wasm:opcode:i32.store:before { store++; }
wasm:opcode:i64.store:before { store++; }
wasm:opcode:f32.store:before { store++; }
wasm:opcode:f64.store:before { store++; }
wasm:opcode:i32.store8:before { store++; }
wasm:opcode:i32.store16:before { store++; }
wasm:opcode:i64.store8:before { store++; }
wasm:opcode:i64.store16:before { store++; }
wasm:opcode:i64.store32:before { store++; }
wasm:opcode:memory.size:before { mem++; }
wasm:opcode:memory.grow:before { mem++; }
wasm:opcode:i32.const:before { const++; }
wasm:opcode:i64.const:before { const++; }
wasm:opcode:f32.const:before { const++; }
wasm:opcode:f64.const:before { const++; }
wasm:opcode:ref.null:before { gc++; }
wasm:opcode:ref.is_null:before { gc++; }
wasm:opcode:ref.func:before { gc++; }
wasm:opcode:ref.eq:before { gc++; }
wasm:opcode:i32.eqz:before { compare++; }
wasm:opcode:i32.eq:before { compare++; }
wasm:opcode:i32.ne:before { compare++; }
wasm:opcode:i32.lt_s:before { compare++; }
wasm:opcode:i32.lt_u:before { compare++; }
wasm:opcode:i32.gt_s:before { compare++; }
wasm:opcode:i32.gt_u:before { compare++; }
wasm:opcode:i32.le_s:before { compare++; }
wasm:opcode:i32.le_u:before { compare++; }
wasm:opcode:i32.ge_s:before { compare++; }
wasm:opcode:i32.ge_u:before { compare++; }
wasm:opcode:i64.eqz:before { compare++; }
wasm:opcode:i64.eq:before { compare++; }
wasm:opcode:i64.ne:before { compare++; }
wasm:opcode:i64.lt_s:before { compare++; }
wasm:opcode:i64.lt_u:before { compare++; }
wasm:opcode:i64.gt_s:before { compare++; }
wasm:opcode:i64.gt_u:before { compare++; }
wasm:opcode:i64.le_s:before { compare++; }
wasm:opcode:i64.le_u:before { compare++; }
wasm:opcode:i64.ge_s:before { compare++; }
wasm:opcode:i64.ge_u:before { compare++; }
wasm:opcode:f32.eq:before { compare++; }
wasm:opcode:f32.ne:before { compare++; }
wasm:opcode:f32.lt:before { compare++; }
wasm:opcode:f32.gt:before { compare++; }
wasm:opcode:f32.le:before { compare++; }
wasm:opcode:f32.ge:before { compare++; }
wasm:opcode:f64.eq:before { compare++; }
wasm:opcode:f64.ne:before { compare++; }
wasm:opcode:f64.lt:before { compare++; }
wasm:opcode:f64.gt:before { compare++; }
wasm:opcode:f64.le:before { compare++; }
wasm:opcode:f64.ge:before { compare++; }
wasm:opcode:i32.clz:before { arith++; }
wasm:opcode:i32.ctz:before { arith++; }
wasm:opcode:i32.popcnt:before { arith++; }
wasm:opcode:i32.add:before { arith++; }
wasm:opcode:i32.sub:before { arith++; }
wasm:opcode:i32.mul:before { arith++; }
wasm:opcode:i32.div_s:before { arith++; }
wasm:opcode:i32.div_u:before { arith++; }
wasm:opcode:i32.rem_s:before { arith++; }
wasm:opcode:i32.rem_u:before { arith++; }
wasm:opcode:i32.and:before { arith++; }
wasm:opcode:i32.or:before { arith++; }
wasm:opcode:i32.xor:before { arith++; }
wasm:opcode:i32.shl:before { arith++; }
wasm:opcode:i32.shr_s:before { arith++; }
wasm:opcode:i32.shr_u:before { arith++; }
wasm:opcode:i32.rotl:before { arith++; }
wasm:opcode:i32.rotr:before { arith++; }
wasm:opcode:i64.clz:before { arith++; }
wasm:opcode:i64.ctz:before { arith++; }
wasm:opcode:i64.popcnt:before { arith++; }
wasm:opcode:i64.add:before { arith++; }
wasm:opcode:i64.sub:before { arith++; }
wasm:opcode:i64.mul:before { arith++; }
wasm:opcode:i64.div_s:before { arith++; }
wasm:opcode:i64.div_u:before { arith++; }
wasm:opcode:i64.rem_s:before { arith++; }
wasm:opcode:i64.rem_u:before { arith++; }
wasm:opcode:i64.and:before { arith++; }
wasm:opcode:i64.or:before { arith++; }
wasm:opcode:i64.xor:before { arith++; }
wasm:opcode:i64.shl:before { arith++; }
wasm:opcode:i64.shr_s:before { arith++; }
wasm:opcode:i64.shr_u:before { arith++; }
wasm:opcode:i64.rotl:before { arith++; }
wasm:opcode:i64.rotr:before { arith++; }
wasm:opcode:f32.abs:before { arith++; }
wasm:opcode:f32.neg:before { arith++; }
wasm:opcode:f32.ceil:before { arith++; }
wasm:opcode:f32.floor:before { arith++; }
wasm:opcode:f32.trunc:before { arith++; }
wasm:opcode:f32.nearest:before { arith++; }
wasm:opcode:f32.sqrt:before { arith++; }
wasm:opcode:f32.add:before { arith++; }
wasm:opcode:f32.sub:before { arith++; }
wasm:opcode:f32.mul:before { arith++; }
wasm:opcode:f32.div:before { arith++; }
wasm:opcode:f32.min:before { arith++; }
wasm:opcode:f32.max:before { arith++; }
wasm:opcode:f32.copysign:before { arith++; }
wasm:opcode:f64.abs:before { arith++; }
wasm:opcode:f64.neg:before { arith++; }
wasm:opcode:f64.ceil:before { arith++; }
wasm:opcode:f64.floor:before { arith++; }
wasm:opcode:f64.trunc:before { arith++; }
wasm:opcode:f64.nearest:before { arith++; }
wasm:opcode:f64.sqrt:before { arith++; }
wasm:opcode:f64.add:before { arith++; }
wasm:opcode:f64.sub:before { arith++; }
wasm:opcode:f64.mul:before { arith++; }
wasm:opcode:f64.div:before { arith++; }
wasm:opcode:f64.min:before { arith++; }
wasm:opcode:f64.max:before { arith++; }
wasm:opcode:f64.copysign:before { arith++; }
wasm:opcode:i32.wrap_i64:before { convert++; }
wasm:opcode:i32.trunc_f32_s:before { convert++; }
wasm:opcode:i32.trunc_f32_u:before { convert++; }
wasm:opcode:i32.trunc_f64_s:before { convert++; }
wasm:opcode:i32.trunc_f64_u:before { convert++; }
wasm:opcode:i64.extend_i32_s:before { convert++; }
wasm:opcode:i64.extend_i32_u:before { convert++; }
wasm:opcode:i64.trunc_f32_s:before { convert++; }
wasm:opcode:i64.trunc_f32_u:before { convert++; }
wasm:opcode:f32.convert_i32_s:before { convert++; }
wasm:opcode:f32.convert_i32_u:before { convert++; }
wasm:opcode:f32.convert_i64_s:before { convert++; }
wasm:opcode:f32.convert_i64_u:before { convert++; }
wasm:opcode:f32.demote_f64:before { convert++; }
wasm:opcode:f64.convert_i32_s:before { convert++; }
wasm:opcode:f64.convert_i32_u:before { convert++; }
wasm:opcode:f64.convert_i64_s:before { convert++; }
wasm:opcode:f64.convert_i64_u:before { convert++; }
wasm:opcode:f64.promote_f32:before { convert++; }
wasm:opcode:i32.reinterpret_f32:before { convert++; }
wasm:opcode:i64.reinterpret_f64:before { convert++; }
wasm:opcode:f32.reinterpret_i32:before { convert++; }
wasm:opcode:f64.reinterpret_i64:before { convert++; }
wasm:opcode:i32.extend8_s:before { convert++; }
wasm:opcode:i32.extend16_s:before { convert++; }
wasm:opcode:i64.extend8_s:before { convert++; }
wasm:opcode:i64.extend16_s:before { convert++; }
wasm:opcode:i64.extend32_s:before { convert++; }
wasm:opcode:struct.new:before { gc++; }
wasm:opcode:struct.new_default:before { gc++; }
wasm:opcode:struct.get:before { gc++; }
wasm:opcode:struct.get_s:before { gc++; }
wasm:opcode:struct.get_u:before { gc++; }
wasm:opcode:struct.set:before { gc++; }
wasm:opcode:array.new:before { gc++; }
wasm:opcode:array.new_default:before { gc++; }
wasm:opcode:array.new_fixed:before { gc++; }
wasm:opcode:array.new_data:before { gc++; }
wasm:opcode:array.new_elem:before { gc++; }
wasm:opcode:array.get:before { gc++; }
wasm:opcode:array.get_s:before { gc++; }
wasm:opcode:array.get_u:before { gc++; }
wasm:opcode:array.set:before { gc++; }
wasm:opcode:array.len:before { gc++; }
wasm:opcode:array.fill:before { gc++; }
wasm:opcode:array.copy:before { gc++; }
wasm:opcode:array.init_data:before { gc++; }
wasm:opcode:array.init_elem:before { gc++; }
wasm:opcode:ref.test:before { gc++; }
wasm:opcode:ref.cast:before { gc++; }
wasm:opcode:br_on_cast:before { control++; }
wasm:opcode:br_on_cast_fail:before { control++; }
wasm:opcode:any.convert_extern:before { gc++; }
wasm:opcode:extern.convert_any:before { gc++; }
wasm:opcode:ref.i31:before { gc++; }
wasm:opcode:i31.get_s:before { gc++; }
wasm:opcode:i31.get_u:before { gc++; }
wasm:opcode:i32.trunc_sat_f32_s:before { convert++; }
wasm:opcode:i32.trunc_sat_f32_u:before { convert++; }
wasm:opcode:i32.trunc_sat_f64_s:before { convert++; }
wasm:opcode:i32.trunc_sat_f64_u:before { convert++; }
wasm:opcode:i64.trunc_sat_f32_s:before { convert++; }
wasm:opcode:i64.trunc_sat_f32_u:before { convert++; }
wasm:opcode:i64.trunc_sat_f64_s:before { convert++; }
wasm:opcode:i64.trunc_sat_f64_u:before { convert++; }
wasm:opcode:memory.init:before { mem++; }
wasm:opcode:memory.copy:before { mem++; }
wasm:opcode:memory.fill:before { mem++; }
wasm:opcode:data.drop:before { mem++; }
wasm:opcode:elem.drop:before { table++; }
wasm:opcode:try_table|table*:before { table++; }
wasm:opcode:memory.atomic_notify:before { atomic++; }
wasm:opcode:memory.atomic_wait32:before { atomic++; }
wasm:opcode:memory.atomic_wait64:before { atomic++; }
wasm:opcode:atomic.fence:before { atomic++; }
wasm:opcode:i32.atomic_load:before { atomic++; }
wasm:opcode:i64.atomic_load:before { atomic++; }
wasm:opcode:i32.atomic_load8_u:before { atomic++; }
wasm:opcode:i32.atomic_load16_u:before { atomic++; }
wasm:opcode:i64.atomic_load8_u:before { atomic++; }
wasm:opcode:i64.atomic_load16_u:before { atomic++; }
wasm:opcode:i64.atomic_load32_u:before { atomic++; }
wasm:opcode:i32.atomic_store:before { atomic++; }
wasm:opcode:i32.atomic_store8:before { atomic++; }
wasm:opcode:i32.atomic_store16:before { atomic++; }
wasm:opcode:i64.atomic_store:before { atomic++; }
wasm:opcode:i64.atomic_store8:before { atomic++; }
wasm:opcode:i64.atomic_store16:before { atomic++; }
wasm:opcode:i64.atomic_store32:before { atomic++; }
wasm:opcode:i32.atomic_rmw_add:before { atomic++; }
wasm:opcode:i32.atomic_rmw8_add_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw16_add_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw_add:before { atomic++; }
wasm:opcode:i64.atomic_rmw8_add_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw16_add_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw32_add_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw_sub:before { atomic++; }
wasm:opcode:i32.atomic_rmw8_sub_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw16_sub_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw_sub:before { atomic++; }
wasm:opcode:i64.atomic_rmw8_sub_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw16_sub_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw32_sub_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw_and:before { atomic++; }
wasm:opcode:i32.atomic_rmw8_and_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw16_and_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw_and:before { atomic++; }
wasm:opcode:i64.atomic_rmw8_and_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw16_and_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw32_and_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw_or:before { atomic++; }
wasm:opcode:i32.atomic_rmw8_or_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw16_or_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw_or:before { atomic++; }
wasm:opcode:i64.atomic_rmw8_or_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw16_or_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw32_or_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw_xor:before { atomic++; }
wasm:opcode:i32.atomic_rmw8_xor_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw16_xor_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw_xor:before { atomic++; }
wasm:opcode:i64.atomic_rmw8_xor_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw16_xor_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw32_xor_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw_xchg:before { atomic++; }
wasm:opcode:i32.atomic_rmw8_xchg_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw16_xchg_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw_xchg:before { atomic++; }
wasm:opcode:i64.atomic_rmw8_xchg_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw16_xchg_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw32_xchg_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw_cmpxchg:before { atomic++; }
wasm:opcode:i32.atomic_rmw8_cmpxchg_u:before { atomic++; }
wasm:opcode:i32.atomic_rmw16_cmpxchg_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw_cmpxchg:before { atomic++; }
wasm:opcode:i64.atomic_rmw8_cmpxchg_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw16_cmpxchg_u:before { atomic++; }
wasm:opcode:i64.atomic_rmw32_cmpxchg_u:before { atomic++; }
wasm:opcode:call_ref:before { control++; }
wasm:opcode:return_call_ref:before { control++; }
wasm:opcode:ref.as_non_null:before { convert++; }
wasm:opcode:br_on_null:before { control++; }
wasm:opcode:br_on_non_null:before { control++; }
