// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_putc_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::putc_wrap(arg0 as u8);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_puts_wrap_cabi<T: Guest>(arg0: i32, arg1: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::puts_wrap(arg0 as u32, arg1 as u32);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_putu8_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::putu8_wrap(arg0 as u8);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_puti8_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::puti8_wrap(arg0 as i8);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_putu16_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::putu16_wrap(arg0 as u16);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_puti16_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::puti16_wrap(arg0 as i16);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_putu32_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::putu32_wrap(arg0 as u32);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_puti32_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::puti32_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_putu64_wrap_cabi<T: Guest>(arg0: i64) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::putu64_wrap(arg0 as u64);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_puti64_wrap_cabi<T: Guest>(arg0: i64) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::puti64_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_putf32_wrap_cabi<T: Guest>(arg0: f32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::putf32_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_putf64_wrap_cabi<T: Guest>(arg0: f64) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::putf64_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_putbool_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::putbool_wrap(arg0 as u8);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_i32_i32_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_i32_i32_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_i32_i32_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_i32_i32_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_i32_bool_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_i32_bool_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_i32_bool_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_i32_bool_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_i32_string_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_i32_string_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_i32_string_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_i32_string_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_i32_tuple_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_i32_tuple_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_i32_tuple_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_i32_tuple_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_i32_map_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_i32_map_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_i32_map_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_i32_map_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_string_i32_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_string_i32_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_string_i32_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_string_i32_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_string_bool_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_string_bool_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_string_bool_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_string_bool_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_string_string_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_string_string_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_string_string_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_string_string_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_string_tuple_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_string_tuple_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_string_tuple_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_string_tuple_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_string_map_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_string_map_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_string_map_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_string_map_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_bool_i32_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_bool_i32_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_bool_i32_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_bool_i32_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_bool_bool_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_bool_bool_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_bool_bool_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_bool_bool_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_bool_string_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_bool_string_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_bool_string_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_bool_string_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_bool_tuple_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_bool_tuple_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_bool_tuple_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_bool_tuple_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_bool_map_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_bool_map_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_bool_map_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_bool_map_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_tuple_i32_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_tuple_i32_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_tuple_i32_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_tuple_i32_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_tuple_bool_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_tuple_bool_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_tuple_bool_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_tuple_bool_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_tuple_string_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_tuple_string_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_tuple_string_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_tuple_string_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_tuple_tuple_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_tuple_tuple_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_tuple_tuple_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_tuple_tuple_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_tuple_map_with_id_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::create_tuple_map_with_id_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_create_tuple_map_wrap_cabi<T: Guest>() -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::create_tuple_map_wrap();
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_insert_i32_i32_wrap_cabi<T: Guest>(
    arg0: i32,
    arg1: i32,
    arg2: i32,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::insert_i32_i32_wrap(arg0, arg1, arg2);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_insert_i32_string_wrap_cabi<T: Guest>(
    arg0: i32,
    arg1: i32,
    arg2: i32,
    arg3: i32,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::insert_i32_string_wrap(arg0, arg1, arg2, arg3);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_insert_string_i32_wrap_cabi<T: Guest>(
    arg0: i32,
    arg1: i32,
    arg2: i32,
    arg3: i32,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::insert_string_i32_wrap(arg0, arg1, arg2, arg3);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_insert_i32i32tuple_i32_wrap_cabi<T: Guest>(
    arg0: i32,
    arg1: i32,
    arg2: i32,
    arg3: i32,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::insert_i32i32tuple_i32_wrap(arg0, arg1, arg2, arg3);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_insert_i32i32i32tuple_i32_wrap_cabi<T: Guest>(
    arg0: i32,
    arg1: i32,
    arg2: i32,
    arg3: i32,
    arg4: i32,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::insert_i32i32i32tuple_i32_wrap(arg0, arg1, arg2, arg3, arg4);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_i32_i32_wrap_cabi<T: Guest>(arg0: i32, arg1: i32) -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::get_i32_i32_wrap(arg0, arg1);
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_i32_string_wrap_cabi<T: Guest>(
    arg0: i32,
    arg1: i32,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::get_i32_string_wrap(arg0, arg1);
    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_get_i32_string_wrap<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_string_i32_wrap_cabi<T: Guest>(
    arg0: i32,
    arg1: i32,
    arg2: i32,
) -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::get_string_i32_wrap(arg0, arg1, arg2);
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_i32i32tuple_i32_wrap_cabi<T: Guest>(
    arg0: i32,
    arg1: i32,
    arg2: i32,
) -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::get_i32i32tuple_i32_wrap(arg0, arg1, arg2);
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_i32i32i32tuple_i32_wrap_cabi<T: Guest>(
    arg0: i32,
    arg1: i32,
    arg2: i32,
    arg3: i32,
) -> i32 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::get_i32i32i32tuple_i32_wrap(arg0, arg1, arg2, arg3);
    _rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_print_map_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::print_map_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_print_map_as_csv_wrap_cabi<T: Guest>(arg0: i32) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::print_map_as_csv_wrap(arg0);
}
pub trait Guest {
    /// =============
    /// ==== I/O ====
    /// =============
    fn putc_wrap(c: u8) -> ();
    fn puts_wrap(a: u32, l: u32) -> ();
    fn putu8_wrap(u: u8) -> ();
    fn puti8_wrap(i: i8) -> ();
    fn putu16_wrap(u: u16) -> ();
    fn puti16_wrap(i: i16) -> ();
    fn putu32_wrap(u: u32) -> ();
    fn puti32_wrap(i: i32) -> ();
    fn putu64_wrap(u: u64) -> ();
    fn puti64_wrap(i: i64) -> ();
    fn putf32_wrap(f: f32) -> ();
    fn putf64_wrap(f: f64) -> ();
    fn putbool_wrap(u: u8) -> ();
    /// ==============
    /// ==== Maps ====
    /// ==============
    /// INSERT
    fn create_i32_i32_with_id_wrap(id: i32) -> ();
    fn create_i32_i32_wrap() -> i32;
    fn create_i32_bool_with_id_wrap(id: i32) -> ();
    fn create_i32_bool_wrap() -> i32;
    fn create_i32_string_with_id_wrap(id: i32) -> ();
    fn create_i32_string_wrap() -> i32;
    fn create_i32_tuple_with_id_wrap(id: i32) -> ();
    fn create_i32_tuple_wrap() -> i32;
    fn create_i32_map_with_id_wrap(id: i32) -> ();
    fn create_i32_map_wrap() -> i32;
    fn create_string_i32_with_id_wrap(id: i32) -> ();
    fn create_string_i32_wrap() -> i32;
    fn create_string_bool_with_id_wrap(id: i32) -> ();
    fn create_string_bool_wrap() -> i32;
    fn create_string_string_with_id_wrap(id: i32) -> ();
    fn create_string_string_wrap() -> i32;
    fn create_string_tuple_with_id_wrap(id: i32) -> ();
    fn create_string_tuple_wrap() -> i32;
    fn create_string_map_with_id_wrap(id: i32) -> ();
    fn create_string_map_wrap() -> i32;
    fn create_bool_i32_with_id_wrap(id: i32) -> ();
    fn create_bool_i32_wrap() -> i32;
    fn create_bool_bool_with_id_wrap(id: i32) -> ();
    fn create_bool_bool_wrap() -> i32;
    fn create_bool_string_with_id_wrap(id: i32) -> ();
    fn create_bool_string_wrap() -> i32;
    fn create_bool_tuple_with_id_wrap(id: i32) -> ();
    fn create_bool_tuple_wrap() -> i32;
    fn create_bool_map_with_id_wrap(id: i32) -> ();
    fn create_bool_map_wrap() -> i32;
    fn create_tuple_i32_with_id_wrap(id: i32) -> ();
    fn create_tuple_i32_wrap() -> i32;
    fn create_tuple_bool_with_id_wrap(id: i32) -> ();
    fn create_tuple_bool_wrap() -> i32;
    fn create_tuple_string_with_id_wrap(id: i32) -> ();
    fn create_tuple_string_wrap() -> i32;
    fn create_tuple_tuple_with_id_wrap(id: i32) -> ();
    fn create_tuple_tuple_wrap() -> i32;
    fn create_tuple_map_with_id_wrap(id: i32) -> ();
    fn create_tuple_map_wrap() -> i32;
    /// INSERT
    fn insert_i32_i32_wrap(id: i32, key: i32, value: i32) -> ();
    fn insert_i32_string_wrap(id: i32, key: i32, val_offset: i32, val_length: i32) -> ();
    fn insert_string_i32_wrap(id: i32, key_offset: i32, key_length: i32, val: i32) -> ();
    fn insert_i32i32tuple_i32_wrap(id: i32, key0: i32, key1: i32, value: i32) -> ();
    fn insert_i32i32i32tuple_i32_wrap(
        id: i32,
        key0: i32,
        key1: i32,
        key2: i32,
        value: i32,
    ) -> ();
    /// GET
    fn get_i32_i32_wrap(id: i32, key: i32) -> i32;
    fn get_i32_string_wrap(id: i32, key: i32) -> _rt::String;
    fn get_string_i32_wrap(id: i32, key_offset: i32, key_length: i32) -> i32;
    fn get_i32i32tuple_i32_wrap(id: i32, key0: i32, key1: i32) -> i32;
    fn get_i32i32i32tuple_i32_wrap(id: i32, key0: i32, key1: i32, key2: i32) -> i32;
    /// PRINT
    fn print_map_wrap(id: i32) -> ();
    fn print_map_as_csv_wrap(id: i32) -> ();
}
#[doc(hidden)]
macro_rules! __export_world_support_lib_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "putc-wrap")] unsafe extern "C" fn
        export_putc_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_putc_wrap_cabi::<$ty > (arg0) } } #[unsafe (export_name = "puts-wrap")]
        unsafe extern "C" fn export_puts_wrap(arg0 : i32, arg1 : i32,) { unsafe {
        $($path_to_types)*:: _export_puts_wrap_cabi::<$ty > (arg0, arg1) } } #[unsafe
        (export_name = "putu8-wrap")] unsafe extern "C" fn export_putu8_wrap(arg0 : i32,)
        { unsafe { $($path_to_types)*:: _export_putu8_wrap_cabi::<$ty > (arg0) } }
        #[unsafe (export_name = "puti8-wrap")] unsafe extern "C" fn
        export_puti8_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_puti8_wrap_cabi::<$ty > (arg0) } } #[unsafe (export_name =
        "putu16-wrap")] unsafe extern "C" fn export_putu16_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_putu16_wrap_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "puti16-wrap")] unsafe extern "C" fn export_puti16_wrap(arg0 :
        i32,) { unsafe { $($path_to_types)*:: _export_puti16_wrap_cabi::<$ty > (arg0) } }
        #[unsafe (export_name = "putu32-wrap")] unsafe extern "C" fn
        export_putu32_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_putu32_wrap_cabi::<$ty > (arg0) } } #[unsafe (export_name =
        "puti32-wrap")] unsafe extern "C" fn export_puti32_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_puti32_wrap_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "putu64-wrap")] unsafe extern "C" fn export_putu64_wrap(arg0 :
        i64,) { unsafe { $($path_to_types)*:: _export_putu64_wrap_cabi::<$ty > (arg0) } }
        #[unsafe (export_name = "puti64-wrap")] unsafe extern "C" fn
        export_puti64_wrap(arg0 : i64,) { unsafe { $($path_to_types)*::
        _export_puti64_wrap_cabi::<$ty > (arg0) } } #[unsafe (export_name =
        "putf32-wrap")] unsafe extern "C" fn export_putf32_wrap(arg0 : f32,) { unsafe {
        $($path_to_types)*:: _export_putf32_wrap_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "putf64-wrap")] unsafe extern "C" fn export_putf64_wrap(arg0 :
        f64,) { unsafe { $($path_to_types)*:: _export_putf64_wrap_cabi::<$ty > (arg0) } }
        #[unsafe (export_name = "putbool-wrap")] unsafe extern "C" fn
        export_putbool_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_putbool_wrap_cabi::<$ty > (arg0) } } #[unsafe (export_name =
        "create-i32-i32-with-id-wrap")] unsafe extern "C" fn
        export_create_i32_i32_with_id_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_create_i32_i32_with_id_wrap_cabi::<$ty > (arg0) } } #[unsafe (export_name
        = "create-i32-i32-wrap")] unsafe extern "C" fn export_create_i32_i32_wrap() ->
        i32 { unsafe { $($path_to_types)*:: _export_create_i32_i32_wrap_cabi::<$ty > () }
        } #[unsafe (export_name = "create-i32-bool-with-id-wrap")] unsafe extern "C" fn
        export_create_i32_bool_with_id_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_create_i32_bool_with_id_wrap_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "create-i32-bool-wrap")] unsafe extern "C" fn
        export_create_i32_bool_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_i32_bool_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-i32-string-with-id-wrap")] unsafe extern "C" fn
        export_create_i32_string_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_i32_string_with_id_wrap_cabi::<$ty > (arg0) }
        } #[unsafe (export_name = "create-i32-string-wrap")] unsafe extern "C" fn
        export_create_i32_string_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_i32_string_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-i32-tuple-with-id-wrap")] unsafe extern "C" fn
        export_create_i32_tuple_with_id_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_create_i32_tuple_with_id_wrap_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "create-i32-tuple-wrap")] unsafe extern "C" fn
        export_create_i32_tuple_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_i32_tuple_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-i32-map-with-id-wrap")] unsafe extern "C" fn
        export_create_i32_map_with_id_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_create_i32_map_with_id_wrap_cabi::<$ty > (arg0) } } #[unsafe (export_name
        = "create-i32-map-wrap")] unsafe extern "C" fn export_create_i32_map_wrap() ->
        i32 { unsafe { $($path_to_types)*:: _export_create_i32_map_wrap_cabi::<$ty > () }
        } #[unsafe (export_name = "create-string-i32-with-id-wrap")] unsafe extern "C" fn
        export_create_string_i32_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_string_i32_with_id_wrap_cabi::<$ty > (arg0) }
        } #[unsafe (export_name = "create-string-i32-wrap")] unsafe extern "C" fn
        export_create_string_i32_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_string_i32_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-string-bool-with-id-wrap")] unsafe extern "C" fn
        export_create_string_bool_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_string_bool_with_id_wrap_cabi::<$ty > (arg0)
        } } #[unsafe (export_name = "create-string-bool-wrap")] unsafe extern "C" fn
        export_create_string_bool_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_string_bool_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-string-string-with-id-wrap")] unsafe extern "C" fn
        export_create_string_string_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_string_string_with_id_wrap_cabi::<$ty >
        (arg0) } } #[unsafe (export_name = "create-string-string-wrap")] unsafe extern
        "C" fn export_create_string_string_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_string_string_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-string-tuple-with-id-wrap")] unsafe extern "C" fn
        export_create_string_tuple_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_string_tuple_with_id_wrap_cabi::<$ty > (arg0)
        } } #[unsafe (export_name = "create-string-tuple-wrap")] unsafe extern "C" fn
        export_create_string_tuple_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_string_tuple_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-string-map-with-id-wrap")] unsafe extern "C" fn
        export_create_string_map_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_string_map_with_id_wrap_cabi::<$ty > (arg0) }
        } #[unsafe (export_name = "create-string-map-wrap")] unsafe extern "C" fn
        export_create_string_map_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_string_map_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-bool-i32-with-id-wrap")] unsafe extern "C" fn
        export_create_bool_i32_with_id_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_create_bool_i32_with_id_wrap_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "create-bool-i32-wrap")] unsafe extern "C" fn
        export_create_bool_i32_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_bool_i32_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-bool-bool-with-id-wrap")] unsafe extern "C" fn
        export_create_bool_bool_with_id_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_create_bool_bool_with_id_wrap_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "create-bool-bool-wrap")] unsafe extern "C" fn
        export_create_bool_bool_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_bool_bool_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-bool-string-with-id-wrap")] unsafe extern "C" fn
        export_create_bool_string_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_bool_string_with_id_wrap_cabi::<$ty > (arg0)
        } } #[unsafe (export_name = "create-bool-string-wrap")] unsafe extern "C" fn
        export_create_bool_string_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_bool_string_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-bool-tuple-with-id-wrap")] unsafe extern "C" fn
        export_create_bool_tuple_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_bool_tuple_with_id_wrap_cabi::<$ty > (arg0) }
        } #[unsafe (export_name = "create-bool-tuple-wrap")] unsafe extern "C" fn
        export_create_bool_tuple_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_bool_tuple_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-bool-map-with-id-wrap")] unsafe extern "C" fn
        export_create_bool_map_with_id_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_create_bool_map_with_id_wrap_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "create-bool-map-wrap")] unsafe extern "C" fn
        export_create_bool_map_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_bool_map_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-tuple-i32-with-id-wrap")] unsafe extern "C" fn
        export_create_tuple_i32_with_id_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_create_tuple_i32_with_id_wrap_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "create-tuple-i32-wrap")] unsafe extern "C" fn
        export_create_tuple_i32_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_tuple_i32_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-tuple-bool-with-id-wrap")] unsafe extern "C" fn
        export_create_tuple_bool_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_tuple_bool_with_id_wrap_cabi::<$ty > (arg0) }
        } #[unsafe (export_name = "create-tuple-bool-wrap")] unsafe extern "C" fn
        export_create_tuple_bool_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_tuple_bool_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-tuple-string-with-id-wrap")] unsafe extern "C" fn
        export_create_tuple_string_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_tuple_string_with_id_wrap_cabi::<$ty > (arg0)
        } } #[unsafe (export_name = "create-tuple-string-wrap")] unsafe extern "C" fn
        export_create_tuple_string_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_tuple_string_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-tuple-tuple-with-id-wrap")] unsafe extern "C" fn
        export_create_tuple_tuple_with_id_wrap(arg0 : i32,) { unsafe {
        $($path_to_types)*:: _export_create_tuple_tuple_with_id_wrap_cabi::<$ty > (arg0)
        } } #[unsafe (export_name = "create-tuple-tuple-wrap")] unsafe extern "C" fn
        export_create_tuple_tuple_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_tuple_tuple_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "create-tuple-map-with-id-wrap")] unsafe extern "C" fn
        export_create_tuple_map_with_id_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_create_tuple_map_with_id_wrap_cabi::<$ty > (arg0) } } #[unsafe
        (export_name = "create-tuple-map-wrap")] unsafe extern "C" fn
        export_create_tuple_map_wrap() -> i32 { unsafe { $($path_to_types)*::
        _export_create_tuple_map_wrap_cabi::<$ty > () } } #[unsafe (export_name =
        "insert-i32-i32-wrap")] unsafe extern "C" fn export_insert_i32_i32_wrap(arg0 :
        i32, arg1 : i32, arg2 : i32,) { unsafe { $($path_to_types)*::
        _export_insert_i32_i32_wrap_cabi::<$ty > (arg0, arg1, arg2) } } #[unsafe
        (export_name = "insert-i32-string-wrap")] unsafe extern "C" fn
        export_insert_i32_string_wrap(arg0 : i32, arg1 : i32, arg2 : i32, arg3 : i32,) {
        unsafe { $($path_to_types)*:: _export_insert_i32_string_wrap_cabi::<$ty > (arg0,
        arg1, arg2, arg3) } } #[unsafe (export_name = "insert-string-i32-wrap")] unsafe
        extern "C" fn export_insert_string_i32_wrap(arg0 : i32, arg1 : i32, arg2 : i32,
        arg3 : i32,) { unsafe { $($path_to_types)*::
        _export_insert_string_i32_wrap_cabi::<$ty > (arg0, arg1, arg2, arg3) } } #[unsafe
        (export_name = "insert-i32i32tuple-i32-wrap")] unsafe extern "C" fn
        export_insert_i32i32tuple_i32_wrap(arg0 : i32, arg1 : i32, arg2 : i32, arg3 :
        i32,) { unsafe { $($path_to_types)*::
        _export_insert_i32i32tuple_i32_wrap_cabi::<$ty > (arg0, arg1, arg2, arg3) } }
        #[unsafe (export_name = "insert-i32i32i32tuple-i32-wrap")] unsafe extern "C" fn
        export_insert_i32i32i32tuple_i32_wrap(arg0 : i32, arg1 : i32, arg2 : i32, arg3 :
        i32, arg4 : i32,) { unsafe { $($path_to_types)*::
        _export_insert_i32i32i32tuple_i32_wrap_cabi::<$ty > (arg0, arg1, arg2, arg3,
        arg4) } } #[unsafe (export_name = "get-i32-i32-wrap")] unsafe extern "C" fn
        export_get_i32_i32_wrap(arg0 : i32, arg1 : i32,) -> i32 { unsafe {
        $($path_to_types)*:: _export_get_i32_i32_wrap_cabi::<$ty > (arg0, arg1) } }
        #[unsafe (export_name = "get-i32-string-wrap")] unsafe extern "C" fn
        export_get_i32_string_wrap(arg0 : i32, arg1 : i32,) -> * mut u8 { unsafe {
        $($path_to_types)*:: _export_get_i32_string_wrap_cabi::<$ty > (arg0, arg1) } }
        #[unsafe (export_name = "cabi_post_get-i32-string-wrap")] unsafe extern "C" fn
        _post_return_get_i32_string_wrap(arg0 : * mut u8,) { unsafe {
        $($path_to_types)*:: __post_return_get_i32_string_wrap::<$ty > (arg0) } }
        #[unsafe (export_name = "get-string-i32-wrap")] unsafe extern "C" fn
        export_get_string_i32_wrap(arg0 : i32, arg1 : i32, arg2 : i32,) -> i32 { unsafe {
        $($path_to_types)*:: _export_get_string_i32_wrap_cabi::<$ty > (arg0, arg1, arg2)
        } } #[unsafe (export_name = "get-i32i32tuple-i32-wrap")] unsafe extern "C" fn
        export_get_i32i32tuple_i32_wrap(arg0 : i32, arg1 : i32, arg2 : i32,) -> i32 {
        unsafe { $($path_to_types)*:: _export_get_i32i32tuple_i32_wrap_cabi::<$ty >
        (arg0, arg1, arg2) } } #[unsafe (export_name = "get-i32i32i32tuple-i32-wrap")]
        unsafe extern "C" fn export_get_i32i32i32tuple_i32_wrap(arg0 : i32, arg1 : i32,
        arg2 : i32, arg3 : i32,) -> i32 { unsafe { $($path_to_types)*::
        _export_get_i32i32i32tuple_i32_wrap_cabi::<$ty > (arg0, arg1, arg2, arg3) } }
        #[unsafe (export_name = "print-map-wrap")] unsafe extern "C" fn
        export_print_map_wrap(arg0 : i32,) { unsafe { $($path_to_types)*::
        _export_print_map_wrap_cabi::<$ty > (arg0) } } #[unsafe (export_name =
        "print-map-as-csv-wrap")] unsafe extern "C" fn export_print_map_as_csv_wrap(arg0
        : i32,) { unsafe { $($path_to_types)*:: _export_print_map_as_csv_wrap_cabi::<$ty
        > (arg0) } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_support_lib_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 2 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea(
    [::core::mem::MaybeUninit::uninit(); 2 * ::core::mem::size_of::<*const u8>()],
);
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_support_lib_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_support_lib_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_support_lib_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:whamm-core:support-lib:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2305] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xff\x10\x01A\x02\x01\
AY\x01@\x01\x01c}\x01\0\x04\0\x09putc-wrap\x01\0\x01@\x02\x01ay\x01ly\x01\0\x04\0\
\x09puts-wrap\x01\x01\x01@\x01\x01u}\x01\0\x04\0\x0aputu8-wrap\x01\x02\x01@\x01\x01\
i~\x01\0\x04\0\x0aputi8-wrap\x01\x03\x01@\x01\x01u{\x01\0\x04\0\x0bputu16-wrap\x01\
\x04\x01@\x01\x01i|\x01\0\x04\0\x0bputi16-wrap\x01\x05\x01@\x01\x01uy\x01\0\x04\0\
\x0bputu32-wrap\x01\x06\x01@\x01\x01iz\x01\0\x04\0\x0bputi32-wrap\x01\x07\x01@\x01\
\x01uw\x01\0\x04\0\x0bputu64-wrap\x01\x08\x01@\x01\x01ix\x01\0\x04\0\x0bputi64-w\
rap\x01\x09\x01@\x01\x01fv\x01\0\x04\0\x0bputf32-wrap\x01\x0a\x01@\x01\x01fu\x01\
\0\x04\0\x0bputf64-wrap\x01\x0b\x04\0\x0cputbool-wrap\x01\x02\x01@\x01\x02idz\x01\
\0\x04\0\x1bcreate-i32-i32-with-id-wrap\x01\x0c\x01@\0\0z\x04\0\x13create-i32-i3\
2-wrap\x01\x0d\x04\0\x1ccreate-i32-bool-with-id-wrap\x01\x0c\x04\0\x14create-i32\
-bool-wrap\x01\x0d\x04\0\x1ecreate-i32-string-with-id-wrap\x01\x0c\x04\0\x16crea\
te-i32-string-wrap\x01\x0d\x04\0\x1dcreate-i32-tuple-with-id-wrap\x01\x0c\x04\0\x15\
create-i32-tuple-wrap\x01\x0d\x04\0\x1bcreate-i32-map-with-id-wrap\x01\x0c\x04\0\
\x13create-i32-map-wrap\x01\x0d\x04\0\x1ecreate-string-i32-with-id-wrap\x01\x0c\x04\
\0\x16create-string-i32-wrap\x01\x0d\x04\0\x1fcreate-string-bool-with-id-wrap\x01\
\x0c\x04\0\x17create-string-bool-wrap\x01\x0d\x04\0!create-string-string-with-id\
-wrap\x01\x0c\x04\0\x19create-string-string-wrap\x01\x0d\x04\0\x20create-string-\
tuple-with-id-wrap\x01\x0c\x04\0\x18create-string-tuple-wrap\x01\x0d\x04\0\x1ecr\
eate-string-map-with-id-wrap\x01\x0c\x04\0\x16create-string-map-wrap\x01\x0d\x04\
\0\x1ccreate-bool-i32-with-id-wrap\x01\x0c\x04\0\x14create-bool-i32-wrap\x01\x0d\
\x04\0\x1dcreate-bool-bool-with-id-wrap\x01\x0c\x04\0\x15create-bool-bool-wrap\x01\
\x0d\x04\0\x1fcreate-bool-string-with-id-wrap\x01\x0c\x04\0\x17create-bool-strin\
g-wrap\x01\x0d\x04\0\x1ecreate-bool-tuple-with-id-wrap\x01\x0c\x04\0\x16create-b\
ool-tuple-wrap\x01\x0d\x04\0\x1ccreate-bool-map-with-id-wrap\x01\x0c\x04\0\x14cr\
eate-bool-map-wrap\x01\x0d\x04\0\x1dcreate-tuple-i32-with-id-wrap\x01\x0c\x04\0\x15\
create-tuple-i32-wrap\x01\x0d\x04\0\x1ecreate-tuple-bool-with-id-wrap\x01\x0c\x04\
\0\x16create-tuple-bool-wrap\x01\x0d\x04\0\x20create-tuple-string-with-id-wrap\x01\
\x0c\x04\0\x18create-tuple-string-wrap\x01\x0d\x04\0\x1fcreate-tuple-tuple-with-\
id-wrap\x01\x0c\x04\0\x17create-tuple-tuple-wrap\x01\x0d\x04\0\x1dcreate-tuple-m\
ap-with-id-wrap\x01\x0c\x04\0\x15create-tuple-map-wrap\x01\x0d\x01@\x03\x02idz\x03\
keyz\x05valuez\x01\0\x04\0\x13insert-i32-i32-wrap\x01\x0e\x01@\x04\x02idz\x03key\
z\x0aval-offsetz\x0aval-lengthz\x01\0\x04\0\x16insert-i32-string-wrap\x01\x0f\x01\
@\x04\x02idz\x0akey-offsetz\x0akey-lengthz\x03valz\x01\0\x04\0\x16insert-string-\
i32-wrap\x01\x10\x01@\x04\x02idz\x04key0z\x04key1z\x05valuez\x01\0\x04\0\x1binse\
rt-i32i32tuple-i32-wrap\x01\x11\x01@\x05\x02idz\x04key0z\x04key1z\x04key2z\x05va\
luez\x01\0\x04\0\x1einsert-i32i32i32tuple-i32-wrap\x01\x12\x01@\x02\x02idz\x03ke\
yz\0z\x04\0\x10get-i32-i32-wrap\x01\x13\x01@\x02\x02idz\x03keyz\0s\x04\0\x13get-\
i32-string-wrap\x01\x14\x01@\x03\x02idz\x0akey-offsetz\x0akey-lengthz\0z\x04\0\x13\
get-string-i32-wrap\x01\x15\x01@\x03\x02idz\x04key0z\x04key1z\0z\x04\0\x18get-i3\
2i32tuple-i32-wrap\x01\x16\x01@\x04\x02idz\x04key0z\x04key1z\x04key2z\0z\x04\0\x1b\
get-i32i32i32tuple-i32-wrap\x01\x17\x04\0\x0eprint-map-wrap\x01\x0c\x04\0\x15pri\
nt-map-as-csv-wrap\x01\x0c\x04\0\x20component:whamm-core/support-lib\x04\0\x0b\x11\
\x01\0\x0bsupport-lib\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-com\
ponent\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
